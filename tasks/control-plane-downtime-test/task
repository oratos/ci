#!/bin/bash
set -Eeuo pipefail; [ -n "${DEBUG:-}" ] && set -x

source "oratos-ci/scripts/test/common.sh"

if [ -z "$GET_CREDENTIALS_HOOK" ]; then
  echo GET_CREDENTIALS_HOOK must be set
  exit 1
fi

function clean_up {
    # restore iptables rules if needed
    bosh \
      --deployment cfcr \
      ssh master -c 'if [ -e /tmp/iptables.orig ]; then sudo iptables-restore /tmp/iptables.orig; sudo rm /tmp/iptables.orig; fi'

    set +e
    kubectl delete \
      --filename oratos-ci/tools/logspewer/manifests/deployment.yml \
      --namespace oratos
    kubectl delete service crosstalk-receiver-oratos \
      --namespace default
    kubectl delete pod crosstalk-receiver-oratos --namespace default
    kubectl delete sink crosstalk-sink --namespace oratos
}

function metrics_lb_ip {
    local ip
    ip="$(kubectl get service crosstalk-receiver-metrics \
                --namespace default \
                --output json \
            | jq .status.loadBalancer.ingress[0].ip --join-output)"
    if [ "$ip" != "null" ] && [ "$ip" != "" ]; then
        echo "$ip"
        return 0
    fi
    return 1
}

function main {
    # set bosh env vars
    pushd bbl-state/bbl-state > /dev/null
      [ -n "${DEBUG:-}" ] && set +x # make sure creds are not output
      eval "$(bbl print-env)"
      [ -n "${DEBUG:-}" ] && set -x
    popd > /dev/null

    # setup kubectl
    [ -n "${DEBUG:-}" ] && set +x # make sure creds are not output
    eval "$GET_CREDENTIALS_HOOK"
    [ -n "${DEBUG:-}" ] && set -x

    # cleanup test state
    trap clean_up EXIT

    # create crosstalk-receiver pod
    apply_crosstalk_receiver oratos

    # create sink connected to crosstalk-receiver
    apply_namespace_sink oratos

    # create emitter
    kubectl apply \
      --filename oratos-ci/tools/logspewer/manifests/deployment.yml \
      --namespace oratos

    # create another lb service to expose /metrics
    kubectl expose pod crosstalk-receiver-oratos \
      --type=LoadBalancer \
      --namespace default \
      --port 6061 \
      --name=crosstalk-receiver-metrics || true

    # poll for crosstalk-receiver lb ip address
    ip="$(retry_command metrics_lb_ip 120 3 true)"

    # verify receiver is receiving logs
    retry_command "assert_log_count_gt 0 oratos $ip" 30

    # add iptables rule to prevent communication with the apiserver
    bosh \
      --deployment cfcr \
      ssh master -c 'sudo iptables-save > /tmp/iptables.orig; sudo iptables -A INPUT -p tcp --dport 8080 -j DROP; sudo iptables -A INPUT -p tcp --dport 8443 -j DROP'

    # assert that the apiserver is down
    assert_fail "kubectl cluster-info > /dev/null 2>&1"

    # get base count
    metrics="$(assert_log_count_gt 0 oratos "$ip" | jq .)"
    result="$(echo "$metrics" \
      | jq '.namespaced["oratos"]' --join-output)"

    # verify receiver is still receiving logs
    retry_command "assert_log_count_gt $result oratos $ip" 10

    # wait for a while after api is down before doing the tests again
    # this should catch cases where we fail when apiserver is down but just
    # not immediately
    sleep 120

    # get base count
    metrics="$(assert_log_count_gt 0 oratos "$ip" | jq .)"
    result="$(echo "$metrics" \
      | jq '.namespaced["oratos"]' --join-output)"

    # verify receiver is still receiving logs
    retry_command "assert_log_count_gt $result oratos $ip" 10
}

main
