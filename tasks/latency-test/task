#!/bin/bash
set -Eeuo pipefail; [ -n "${DEBUG:-}" ] && set -x

BBL_STATE_DIR=bikepark-bbl-state \
  oratos-ci/scripts/cfcr.sh get-credentials bikepark

manifest="
apiVersion: v1
kind: Namespace
metadata:
  name: latency-test
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: latency-test
spec:
  volumes:
  - secret
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  fsGroup:
    rule: RunAsAny
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: latency-test
  namespace: latency-test
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: latency-test
  namespace: latency-test
rules:
- apiGroups:
  - policy
  resources:
  - podsecuritypolicies
  verbs:
  - use
  resourceNames:
  - latency-test
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: latency-test
  namespace: latency-test
subjects:
- kind: ServiceAccount
  name: latency-test
  namespace: latency-test
roleRef:
  kind: Role
  name: latency-test
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Pod
metadata:
  name: latency-receiver
  namespace: latency-test
  labels:
    app: latency-receiver
spec:
  serviceAccountName: latency-test
  containers:
  - name: latency-receiver
    image: oratos/latency-receiver:v0.6
    imagePullPolicy: Always
    env:
    - name: SYSLOG_PORT
      value: \"8080\"
    - name: API_PORT
      value: \"6060\"
    ports:
    - name: syslog
      containerPort: 8080
    - name: metrics
      containerPort: 6060
---
apiVersion: v1
kind: Service
metadata:
  name: latency-receiver
  namespace: latency-test
spec:
  selector:
    app: latency-receiver
  ports:
  - protocol: TCP
    port: 8080
    name: syslog
---
apiVersion: pksapi.io/v1beta1
kind: LogSink
metadata:
  name: latency-sink
  namespace: latency-test
spec:
  type: syslog
  host: latency-receiver.latency-test.svc.cluster.local
  port: 8080
  enable_tls: true
  insecure_skip_verify: true
"

function cleanup {
    echo "$manifest" | kubectl delete --filename - || true
    killall -9 kubectl > /dev/null 2>&1
}
trap cleanup EXIT

# create namespace
echo "$manifest" | kubectl apply --filename -

sleep 30
# create port forward for latency-receiver
kubectl --namespace latency-test port-forward latency-receiver 6060:6060 > /dev/null 2>&1 &
sleep 10

# curl latency receiver to emit
latency="$(curl --silent --fail http://localhost:6060/latency)"

# send response to datadog
echo posting to datadog
curl --fail -X POST -H "Content-type: application/json" \
    -d "$latency" \
    'https://app.datadoghq.com/api/v1/series?api_key='"$DATADOG_API_KEY"
echo
echo post complete
