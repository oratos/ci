#!/bin/bash
set -Eeuo pipefail; [ -n "$DEBUG" ] && set -x

if [ -z "$GET_CREDENTIALS_HOOK" ]; then
  echo GET_CREDENTIALS_HOOK must be set
  exit 1
fi
if [ -z "$SYSTEM_DOMAIN" ]; then
  echo SYSTEM_DOMAIN must be set
  exit 1
fi
if [ -z "$DATADOG_API_KEY" ]; then
  echo DATADOG_API_KEY must be set
  exit 1
fi

MESSAGE="$MESSAGE-$RANDOM"

go get code.cloudfoundry.org/loggregator-tools/rlpreader

function report_to_datadog {
  currenttime="$(date +%s)"
  APP_NAME=loggregator-rlp-blackbox
  curl --fail -X POST -H "Content-type: application/json" \
  -d "{ \"series\" :
    [
      {
        \"metric\":\"smoke_test.loggregator.k8s_delay\",
        \"points\":[[${currenttime}, ${DELAY}]],
        \"type\":\"gauge\",
        \"host\":\"${SYSTEM_DOMAIN}\",
        \"tags\":[
          \"${APP_NAME}\",
          \"delay_unit:${DELAY_UNIT}\"
        ]
      },
      {
        \"metric\":\"smoke_test.loggregator.k8s_msg_count\",
        \"points\":[[${currenttime}, ${MSG_COUNT}]],
        \"type\":\"gauge\",
        \"host\":\"${SYSTEM_DOMAIN}\",
        \"tags\":[
          \"${APP_NAME}\",
          \"delay:${DELAY}${DELAY_UNIT}\"
        ]
      },
      {
        \"metric\":\"smoke_test.loggregator.k8s_cycles\",
        \"points\":[[${currenttime}, ${CYCLES}]],
        \"type\":\"gauge\",
        \"host\":\"${SYSTEM_DOMAIN}\",
        \"tags\":[
          \"${APP_NAME}\",
          \"delay:${DELAY}${DELAY_UNIT}\"
        ]
      }
    ]
  }" \
  'https://app.datadoghq.com/api/v1/series?api_key='"$DATADOG_API_KEY"

  set +e
  killall rlpreader
  killall kubectl
}
trap report_to_datadog EXIT

MSG_COUNT=0

eval "$GET_CREDENTIALS_HOOK"

echo "
apiVersion: v1
kind: Namespace
metadata:
  name: blackbox-tests
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: logspinner
  namespace: blackbox-tests
  labels:
    app: logspinner
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logspinner
  template:
    metadata:
      labels:
        app: logspinner
    spec:
      containers:
      - name: logspinner
        image: loggregator/logspinner
        env:
        - name: PORT
          value: \"8080\"
" | kubectl apply -f -

pod_name="$(
    kubectl get pod \
        --selector app=logspinner \
        --output=json \
        --namespace blackbox-tests \
        | jq --join-output .items[0].metadata.name
)"
while true; do
    echo -n .
    status="$(
        kubectl get pod "$pod_name" \
            --output=json \
            --namespace blackbox-tests \
            | jq --join-output .status.phase
    )"
    if [ "$status" = "Running" ]; then
        break
    fi
    sleep 10
done

set +x
certs="$(
    kubectl get secret loggregator-tls-certs --namespace oratos --output=json \
        | jq .data
)"
echo "$certs" | jq --raw-output '.["rlp.crt"]' | base64 -d > /tmp/rlp.crt
echo "$certs" | jq --raw-output '.["rlp.key"]' | base64 -d > /tmp/rlp.key
echo "$certs" | jq --raw-output '.["ca.crt"]' | base64 -d > /tmp/ca.crt
[ -n "$DEBUG" ] && set -x

target="$(
    kubectl get service loggregator-rlp \
        --namespace oratos \
        --output=json \
        | jq --join-output .status.loadBalancer.ingress[0].ip
):8082"

kubectl port-forward "$pod_name" 8080:8080 \
    --namespace blackbox-tests > /dev/null &

sleep 3

echo "Collecting logs for $pod_name"

rlpreader \
    -app-id "blackbox-tests/deployment/logspinner" \
    -target "$target" \
    -ca "/tmp/ca.crt" \
    -cert "/tmp/rlp.crt" \
    -key "/tmp/rlp.key" > output.txt &

sleep 10 # wait 10 seconds to establish connection

echo "Triggering $pod_name"
curl "http://localhost:8080?cycles=$CYCLES&delay=$DELAY$DELAY_UNIT&text=$MESSAGE"

sleep "$WAIT" # wait for a bit to collect logs

# Dont quit the script if fails to grep
set +e
MSG_COUNT=$(grep -c "$MESSAGE" output.txt)
set -e

echo "The number of messages received: $MSG_COUNT"
echo "The number of messages sent    : $CYCLES"
if [ "$MSG_COUNT" -lt $(($CYCLES * 99 / 100)) ]; then
    echo =========================================
    echo THE RELIABILITY TEST DID NOT MEET OUR SLO
    echo =========================================
    exit 1
fi

# Trap will send metrics to datadog
