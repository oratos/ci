#!/bin/bash
set -Eeuo pipefail; [ -n "${DEBUG:-}" ] && set -x

# compute sha for tagging the docker image
sha="$(cd sink-resources && git rev-parse @)"
image_name="$CONTAINER_REPOSITORY/$COMPONENT:$sha"

# Note: this was copied from the docker-image-resource
# https://github.com/concourse/docker-image-resource/blob/c725c6277ca2820016de1bfe2bdfabaad5fd5879/assets/common.sh#L4
sanitize_cgroups() {
mkdir -p /sys/fs/cgroup
mountpoint -q /sys/fs/cgroup || \
    mount -t tmpfs -o uid=0,gid=0,mode=0755 cgroup /sys/fs/cgroup

mount -o remount,rw /sys/fs/cgroup

sed -e 1d /proc/cgroups | while read -r sys _ _ enabled; do
    if [ "$enabled" != "1" ]; then
    # subsystem disabled; skip
    continue
    fi

    grouping="$(cut -d: -f2 /proc/self/cgroup | grep "\\<$sys\\>")" || true
    if [ -z "$grouping" ]; then
    # subsystem not mounted anywhere; mount it on its own
    grouping="$sys"
    fi

    mountpoint="/sys/fs/cgroup/$grouping"

    mkdir -p "$mountpoint"

    # clear out existing mount to make sure new one is read-write
    if mountpoint -q "$mountpoint"; then
    umount "$mountpoint"
    fi

    mount -n -t cgroup -o "$grouping" cgroup "$mountpoint"

    if [ "$grouping" != "$sys" ]; then
    if [ -L "/sys/fs/cgroup/$sys" ]; then
        rm "/sys/fs/cgroup/$sys"
    fi

    ln -s "$mountpoint" "/sys/fs/cgroup/$sys"
    fi
done

if ! test -e /sys/fs/cgroup/systemd ; then
    mkdir /sys/fs/cgroup/systemd
    mount -t cgroup -o none,name=systemd none /sys/fs/cgroup/systemd
fi
}
sanitize_cgroups
/usr/bin/dockerd &
docker_pid=$!
function cleanup {
set +e
kill -9 $docker_pid
killall ssh-agent
}
trap cleanup EXIT

[ -n "${DEBUG:-}" ] && set +x
echo "$DOCKERHUB_PASSWORD" \
| docker login \
    --username "$DOCKERHUB_USERNAME" \
    --password-stdin \
    "$CONTAINER_REPOSITORY"
[ -n "${DEBUG:-}" ] && set -x

pushd sink-resources
  docker build \
    --build-arg BASE_IMAGE="$BASE_IMAGE" \
    --build-arg TELEGRAF_IMAGE="$CONTAINER_REPOSITORY/telegraf:$sha" \
    --build-arg GOLANG_SOURCE="$GOLANG_SOURCE" \
    --build-arg KUBECTL_SOURCE="$KUBECTL_SOURCE" \
    -f "cmd/$COMPONENT/Dockerfile" \
    . \
    -t "$image_name"
popd

docker save "$image_name" | gzip > "image-tarball/$COMPONENT-$sha.tgz"