#!/bin/bash
set -Eeuo pipefail; [ -n "$DEBUG" ] && set -x

# tar docker image
blob_name=${BLOB_NAME?"BLOB_NAME must be given"}
tag=$(cat "blob-release-image/tag")
output_file="${blob_name}:${tag}.tgz"
release_file="sink-resources-release.tgz"

git clone sink-resources-release put-sink-resources-release
pushd put-sink-resources-release
  echo "$PRIVATE_YML" > config/private.yml

  bosh sync-blobs

  echo "Clean old blobs with pattern of ${blob_name}"
  for b in $(bosh blobs --column="Path" | grep "$blob_name"); do
    echo "bosh remove-blob $b"
    bosh remove-blob "$b"
  done
  ls -alh ../blob-release-image/image
  gzip -c ../blob-release-image/image > "${output_file}"

  echo "Begin blob management"
  bosh add-blob "${output_file}" "container-images/${output_file}"
  rm "${output_file}"
  bosh upload-blobs

  echo "Create final release"
  bosh --non-interactive create-release \
       --final \
       --force \
       --tarball="${release_file}"

  version=$(yq r releases/sink-resources-release/index.yml --tojson | jq -r ".builds[].version" | sort | tail -n1)

  echo "Move build ${release_file} - ${version} to bosh-release/binaries"
  mkdir -p ../bosh-release/binaries
  mv "${release_file}" "../bosh-release/binaries/sink-resources-release-${version}.tgz"

  git add .
  git commit -m"CI bump sink resource release to ${version} for ${blob_name}"
popd

echo "$version" > bosh-release/name
echo "$version" > bosh-release/tag

ls -alth bosh-release/binaries
