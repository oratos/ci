#!/bin/bash
set -Eeuo pipefail; [ -n "${DEBUG:-}" ] && set -x

# Note: this was copied from the docker-image-resource
# https://github.com/concourse/docker-image-resource/blob/c725c6277ca2820016de1bfe2bdfabaad5fd5879/assets/common.sh#L4
sanitize_cgroups() {
  mkdir -p /sys/fs/cgroup
  mountpoint -q /sys/fs/cgroup || \
    mount -t tmpfs -o uid=0,gid=0,mode=0755 cgroup /sys/fs/cgroup

  mount -o remount,rw /sys/fs/cgroup

  sed -e 1d /proc/cgroups | while read -r sys _ _ enabled; do
    if [ "$enabled" != "1" ]; then
      # subsystem disabled; skip
      continue
    fi

    grouping="$(cut -d: -f2 /proc/self/cgroup | grep "\\<$sys\\>")" || true
    if [ -z "$grouping" ]; then
      # subsystem not mounted anywhere; mount it on its own
      grouping="$sys"
    fi

    mountpoint="/sys/fs/cgroup/$grouping"

    mkdir -p "$mountpoint"

    # clear out existing mount to make sure new one is read-write
    if mountpoint -q "$mountpoint"; then
      umount "$mountpoint"
    fi

    mount -n -t cgroup -o "$grouping" cgroup "$mountpoint"

    if [ "$grouping" != "$sys" ]; then
      if [ -L "/sys/fs/cgroup/$sys" ]; then
        rm "/sys/fs/cgroup/$sys"
      fi

      ln -s "$mountpoint" "/sys/fs/cgroup/$sys"
    fi
  done

  if ! test -e /sys/fs/cgroup/systemd ; then
    mkdir /sys/fs/cgroup/systemd
    mount -t cgroup -o none,name=systemd none /sys/fs/cgroup/systemd
  fi
}

sanitize_cgroups
/usr/bin/dockerd &
docker_pid=$!
function cleanup {
  set +e
  kill -9 $docker_pid
  killall ssh-agent
}
trap cleanup EXIT

echo waiting 10 seconds while docker starts up
sleep 10

release_file="sink-resources-release.tgz"

git clone sink-resources-release put-sink-resources-release
pushd put-sink-resources-release
  echo "$PRIVATE_YML" > config/private.yml

  bosh sync-blobs

  echo "Clean old blobs"
  for b in $(bosh blobs --column="Path"); do
    echo "bosh remove-blob $b"
    bosh remove-blob "$b"
  done

  echo "Begin blob management"
  for file in ../sink-resources-github-release/*.tgz; do
    file_name=${file##*/}
    bosh add-blob "${file}" "container-images/${file_name}"
  done

  bosh upload-blobs

  echo "Create final release"
  bosh --non-interactive create-release \
       --final \
       --force \
       --version="${SINK_RESOURCES_VERSION#v}" \
       --tarball="${release_file}"

  # Generate OSL config
  echo "Generating OSL config"
  export SINK_RESOURCES_RELEASE_VERSION="${SINK_RESOURCES_VERSION}"
  export OBSERVABILITY_MANAGER_VERSION="${SINK_RESOURCES_SHA}"
  for f in blobs/container-images/*.tgz; do
    docker load --input "$f"
  done
  ./scripts/generate-osl-deps.sh

  echo "Move build ${release_file} - ${SINK_RESOURCES_RELEASE_VERSION} to bosh-release/binaries"
  mkdir -p ../bosh-release/binaries
  mv "${release_file}" "../bosh-release/binaries/sink-resources-release-${SINK_RESOURCES_RELEASE_VERSION}.tgz"

  echo "Copy OSL config sink-resources-${SINK_RESOURCES_SHA}.yml to bosh-release/binaries"
  cp "osl/${SINK_RESOURCES_RELEASE_VERSION}/sink-resources-${SINK_RESOURCES_SHA}.yml" \
      "../bosh-release/binaries/sink-resources-${SINK_RESOURCES_SHA}.yml"

  git add .
  git commit -m"CI bump sink resource release to ${SINK_RESOURCES_RELEASE_VERSION}"
  SINK_RESOURCES_RELEASE_SHA=$(git rev-parse @)
popd

echo "$SINK_RESOURCES_RELEASE_VERSION" > bosh-release/name
echo "$SINK_RESOURCES_RELEASE_VERSION" > bosh-release/tag
echo "$SINK_RESOURCES_RELEASE_SHA" > bosh-release/commitish
ls -alth bosh-release/binaries
