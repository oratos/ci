#!/bin/bash
set -Eeuo pipefail; [ -n "${DEBUG:-}" ] && set -x

source "oratos-ci/scripts/test/common.sh"

function validate {
    ensure_variable_isset "$GET_CREDENTIALS_HOOK" "GET_CREDENTIALS_HOOK"
    ensure_variable_isset "$NAOMI_A_CERT" "NAOMI_A_CERT"
    ensure_variable_isset "$NAOMI_A_KEY" "NAOMI_A_KEY"
    ensure_variable_isset "$NAOMI_B_CERT" "NAOMI_B_CERT"
    ensure_variable_isset "$NAOMI_B_KEY" "NAOMI_B_KEY"
}

function show_status {
    echo "outputs.conf in config map"
    kubectl get cm fluent-bit -n oratos -o json | grep \"outputs.conf\"
}

function cleanup {
    set +e

    print_section_msg  "STARTING CLEANUP ENV"

    show_status

    kubectl --namespace default delete pod crosstalk-receiver-crosstalk-ns-a > /dev/null 2>&1
    kubectl --namespace default delete pod crosstalk-receiver-crosstalk-ns-b > /dev/null 2>&1
    kubectl --namespace default delete pod crosstalk-receiver-cluster > /dev/null 2>&1

    kubectl delete namespace crosstalk-ns-a --cascade > /dev/null 2>&1
    kubectl delete namespace crosstalk-ns-b --cascade > /dev/null 2>&1

    kubectl --namespace default delete service crosstalk-receiver-crosstalk-ns-a > /dev/null 2>&1
    kubectl --namespace default delete service crosstalk-receiver-crosstalk-ns-b > /dev/null 2>&1
    kubectl --namespace default delete service crosstalk-receiver-cluster > /dev/null 2>&1

    kubectl delete clustersink crosstalk-cluster-sink > /dev/null 2>&1

    # Clean up port forwarding with retry
    killall -9 kubectl > /dev/null 2>&1
}

function setup_contexts {
    [ -n "${DEBUG:-}" ] && set +x
    echo "$NAOMI_A_CERT" > /tmp/naomi-a.crt
    echo "$NAOMI_A_KEY" > /tmp/naomi-a.key
    echo "$NAOMI_B_CERT" > /tmp/naomi-b.crt
    echo "$NAOMI_B_KEY" > /tmp/naomi-b.key
    [ -n "${DEBUG:-}" ] && set -x

    context="$(kubectl config current-context)"
    cluster="$(
        kubectl config view --output json \
            | jq --join-output '.contexts[] | select(.name == "'"$context"'") | .context.cluster'
    )"

    kubectl config set-credentials \
        naomi-a \
        --client-certificate /tmp/naomi-a.crt \
        --client-key /tmp/naomi-a.key
    kubectl config set-context \
        naomi-a \
        --cluster "$cluster" \
        --user naomi-a

    kubectl config set-credentials \
        naomi-b \
        --client-certificate /tmp/naomi-b.crt \
        --client-key /tmp/naomi-b.key
    kubectl config set-context \
        naomi-b \
        --cluster "$cluster" \
        --user naomi-b
}

function test_sink_authorization {
    sink="
apiVersion: apps.pivotal.io/v1beta1
kind: Sink
metadata:
  name: crosstalk-test-sink
spec:
  type: syslog
  host: localhost
  port: 8080
"

    print_section_msg "STARTING AUTHORIZATION TEST"
    set +e

    echo "testing naomi-a can write to ns-a"
    echo "$sink" | \
        kubectl apply \
            --context naomi-a \
            --namespace crosstalk-ns-a \
            --filename - > /dev/null 2>&1
    assert_success $?
    kubectl delete \
        --context naomi-a \
        --namespace crosstalk-ns-a \
        sink crosstalk-test-sink > /dev/null 2>&1

    echo "testing naomi-a can not write to ns-b"
    echo "$sink" | \
        kubectl apply \
            --context naomi-a \
            --namespace crosstalk-ns-b \
            --filename - > /dev/null 2>&1
    assert_fail $?

    echo "testing naomi-b can not write to ns-a"
    echo "$sink" | \
        kubectl apply \
            --context naomi-b \
            --namespace crosstalk-ns-a \
            --filename - > /dev/null 2>&1
    assert_fail $?

    echo "testing naomi-b can write to ns-b"
    echo "$sink" | \
        kubectl apply \
            --context naomi-b \
            --namespace crosstalk-ns-b \
            --filename - > /dev/null 2>&1
    assert_success $?
    kubectl delete \
        --context naomi-b \
        --namespace crosstalk-ns-b \
        sink crosstalk-test-sink > /dev/null 2>&1
    set -e

    print_section_msg "AUTHORIZATION TEST COMPLETE"
}

function apply_receivers {
    apply_crosstalk_receiver crosstalk-ns-a
    apply_crosstalk_receiver crosstalk-ns-b
    apply_crosstalk_receiver cluster
}

function apply_emitters {
    apply_emitter crosstalk-ns-a 7
    apply_emitter crosstalk-ns-b 12
}

function apply_sinks {
    apply_namespace_sink crosstalk-ns-a
    apply_namespace_sink crosstalk-ns-b
    apply_cluster_sink
}

function setup_tunnels {
    kubectl --namespace default port-forward crosstalk-receiver-crosstalk-ns-a 6062:6061 > /dev/null 2>&1 &
    kubectl --namespace default port-forward crosstalk-receiver-crosstalk-ns-b 6063:6061 > /dev/null 2>&1 &
    kubectl --namespace default port-forward crosstalk-receiver-cluster 6064:6061 > /dev/null 2>&1 &
}

function assert_metrics {
    local result
    print_section_msg "STARTING MESSAGE TEST"

    ns_a_result="$(curl -s http://localhost:6062/metrics)"
    echo "ns-a-receiver:"
    echo -n "  crosstalk-ns-a: "
    echo "$ns_a_result" | jq '.namespaced["crosstalk-ns-a"]' --raw-output
    echo -n "  crosstalk-ns-b: "
    echo "$ns_a_result" | jq '.namespaced["crosstalk-ns-b"]' --raw-output
    echo -n "  cluster: "
    echo "$ns_a_result" | jq '.cluster' --raw-output

    ns_b_result="$(curl -s http://localhost:6063/metrics)"
    echo "ns-b-receiver:"
    echo -n "  crosstalk-ns-a: "
    echo "$ns_b_result" | jq '.namespaced["crosstalk-ns-a"]' --raw-output
    echo -n "  crosstalk-ns-b: "
    echo "$ns_b_result" | jq '.namespaced["crosstalk-ns-b"]' --raw-output
    echo -n "  cluster: "
    echo "$ns_b_result" | jq '.cluster' --raw-output

    cluster_result="$(curl -s http://localhost:6064/metrics)"
    echo "cluster-receiver:"
    echo -n "  crosstalk-ns-a: "
    echo "$cluster_result" | jq '.namespaced["crosstalk-ns-a"]' --raw-output
    echo -n "  crosstalk-ns-b: "
    echo "$cluster_result" | jq '.namespaced["crosstalk-ns-b"]' --raw-output
    echo -n "  cluster: "
    echo "$cluster_result" | jq '.cluster' --raw-output

    expected="7"
    result="$(echo "$ns_a_result" | jq '.namespaced["crosstalk-ns-a"]' --join-output)"
    check_result_cnt "$expected" "$result" \
        "Expected crosstalk-receiver-crosstalk-ns-a to have value $expected for crosstalk-ns-a"

    expected="0"
    result="$(echo "$ns_a_result" | jq '.namespace["crosstalk-ns-b"]' --join-output)"
    check_result_cnt "$expected" "$result" \
        "Expected crosstalk-receiver-crosstalk-ns-a to have value $expected for crosstalk-ns-b"

    expected="7"
    result="$(echo "$ns_a_result" | jq '.cluster' --join-output)"
    check_result_cnt "$expected" "$result" \
        "Expected crosstalk-receiver-crosstalk-ns-a to have value $expected for cluster"

    expected="0"
    result="$(echo "$ns_b_result" | jq '.namespaced["crosstalk-ns-a"]' --join-output)"
    check_result_cnt "$expected" "$result" \
        "Expected crosstalk-receiver-crosstalk-ns-b to have value $expected for crosstalk-ns-a"

    expected="12"
    result="$(echo "$ns_b_result" | jq '.namespaced["crosstalk-ns-b"]' --join-output)"
    check_result_cnt "$expected" "$result" \
        "Expected crosstalk-receiver-crosstalk-ns-b to have value $expected for crosstalk-ns-b"

    expected="12"
    result="$(echo "$ns_b_result" | jq '.cluster' --join-output)"
    check_result_cnt "$expected" "$result" \
        "Expected crosstalk-receiver-crosstalk-ns-b to have value $expected for cluster"

    expected="7"
    result="$(echo "$cluster_result" | jq '.namespaced["crosstalk-ns-a"]' --join-output)"
    check_result_cnt "$expected" "$result" \
        "Expected crosstalk-receiver-cluster to have value $expected for crosstalk-ns-a"

    expected="12"
    result="$(echo "$cluster_result" | jq '.namespaced["crosstalk-ns-b"]' --join-output)"
    check_result_cnt "$expected" "$result" \
        "Expected crosstalk-receiver-cluster to have value $expected for crosstalk-ns-b"

    expected="19"
    result="$(echo "$cluster_result" | jq '.cluster' --join-output)"
    check_result_cnt "$expected" "$result" \
        "Expected crosstalk-receiver-cluster to have value $expected for cluster"

    print_section_msg "MESSAGE TEST COMPLETE"
}

function main {
    validate
    if [ -z "${DEBUG:-}" ] then
        trap cleanup EXIT
    fi
    login_to_cluster_as_admin

    apply_roles
    setup_contexts

    test_sink_authorization

    apply_receivers
    apply_sinks

    # TODO: This sleep gives the sinks time to get wired into fluent bit and
    # allow messages to start receiving. This should be changed so that the
    # system is primed and the the test immediately follows. This would
    # prevent the test from always taking at least 150 seconds. In addition to
    # waiting for the sinks, we are also waiting for the receivers to come up.
    retry_command "kubectl get pods -n default -l app=crosstalk-receiver-crosstalk-ns-a | grep Running" 60
    retry_command "kubectl get pods -n default -l app=crosstalk-receiver-crosstalk-ns-b | grep Running" 60
    retry_command "kubectl get pods -n default -l app=crosstalk-receiver-cluster | grep Running" 60

    retry_command "kubectl get sinks -n crosstalk-ns-a | grep crosstalk-sink" 60
    retry_command "kubectl get sinks -n crosstalk-ns-b | grep crosstalk-sink" 60
    retry_command "kubectl get clustersinks | grep crosstalk-cluster-sink" 60

    apply_emitters
    setup_tunnels

    # Wait for retry
    retry_command "curl -s http://localhost:6062/metrics | grep namespaced.*crosstalk-ns-a" 60
    retry_command "curl -s http://localhost:6063/metrics | grep namespaced.*crosstalk-ns-b" 60
    retry_command "curl -s http://localhost:6064/metrics | grep namespaced.*crosstalk-ns" 60

    assert_metrics
}

main
