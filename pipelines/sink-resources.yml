groups:
- name: main
  jobs:
  - unit-tests
  - build-sink-controller-image
  - build-event-controller-image
  - build-cert-generator-image
  - build-ghostunnel-image
  - deploy-gke
  - deploy-cfcr
  - deploy-control-plane
  - gke-tests
  - cfcr-tests
  - control-plane-tests
  - promote
- name: release
  jobs:
  - release
  - update-bosh-release

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: vault
  type: docker-image
  source:
    repository: wfernandes/vault-resource
    tag: latest

- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: oratos-ci
  type: git
  source:
    uri: https://github.com/pivotal-cf/oratos-ci
    branch: master

- name: sink-resources
  type: git
  source:
    uri: git@github.com:pivotal-cf/sink-resources
    branch: master
    private_key: ((github.oratos-bot-private-key))

- name: sink-controller-image
  type: docker-image
  source:
    repository: oratos/sink-controller
    username: ((docker-hub.username))
    password: ((docker-hub.password))

- name: event-controller-image
  type: docker-image
  source:
    repository: oratos/event-controller
    username: ((docker-hub.username))
    password: ((docker-hub.password))

- name: fluent-bit-out-syslog-image
  type: docker-image
  source:
    repository: oratos/fluent-bit-out-syslog
    username: ((docker-hub.username))
    password: ((docker-hub.password))
    tag: release-elect

- name: cert-generator-image
  type: docker-image
  source:
    repository: oratos/cert-generator
    username: ((docker-hub.username))
    password: ((docker-hub.password))

- name: ghostunnel-image
  type: docker-image
  source:
    repository: oratos/ghostunnel
    username: ((docker-hub.username))
    password: ((docker-hub.password))

- name: slack-alert
  type: slack-notification
  source:
    url: ((slack.notifications-url))

- name: oratos-ci-testing-cfcr-bbl-state
  type: vault
  source:
    url: https://vault.oratos.ci.cf-app.com
    role_id: ((vault.role_id))
    secret_id: ((vault.secret_id))
    path: secret/envs/oratos-ci-testing-cfcr-bbl-state
    tarball: true

- name: control-plane-test-bbl-state
  type: vault
  source:
    url: https://vault.oratos.ci.cf-app.com
    role_id: ((vault.role_id))
    secret_id: ((vault.secret_id))
    path: secret/envs/control-plane-test-bbl-state
    tarball: true

- name: sink-resources-github-release
  type: github-release
  source:
    owner: pivotal-cf
    repository: sink-resources
    access_token: ((github.oratos-bot-release-access-token))

- name: sink-resources-release
  type: git
  source:
    uri: git@github.com:pivotal-cf/sink-resources-release
    branch: master
    private_key: ((github.oratos-bot-private-key))

- name: sink-resources-release-github-release
  type: github-release
  source:
    owner: pivotal-cf
    repository: sink-resources-release
    access_token: ((github.oratos-bot-release-access-token))

- name: pks-releng-release-bucket
  type: gcs-resource
  source:
    bucket: pks-releng-final-releases
    json_key: ((pks-releng.gcp-json))
    regexp: '.*\.tgz'

jobs:
- name: unit-tests
  plan:
  - aggregate:
    - get: sink-resources
      trigger: true
    - get: oratos-ci
  - aggregate:
    - task: run-linter
      file: oratos-ci/tasks/golangci-lint-modules/task.yml
      input_mapping:
        source-repo: sink-resources
      on_failure:
        put: slack-alert
        params:
          text: Sink Resources Linter failed
    - task: run-tests
      file: oratos-ci/tasks/go-test-mod/task.yml
      privileged: true
      input_mapping:
        source-repo: sink-resources
      params:
        PKGS_HOOK: |
          go list ./... | grep -v vendor | grep -v pkg/client
      on_failure:
        put: slack-alert
        params:
          text: Sink Resources Unit tests failed
    - task: run-verify-codegen
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: oratos/ci-base
        inputs:
        - name: sink-resources
        params:
          DEBUG:
        run:
          path: /bin/bash
          args:
          - "-c"
          - |
            #!/bin/bash
            set -Eeuo pipefail; [ -n "${DEBUG:-}" ] && set -x

            pushd sink-resources/ > /dev/null
              go mod download
              hack/verify-codegen.sh
            popd > /dev/null
      on_failure:
        put: slack-alert
        params:
          text: Sink Resources Verify Codegen failed

- name: build-sink-controller-image
  serial: true
  plan:
  - aggregate:
    - get: sink-resources
      trigger: true
      passed:
      - unit-tests
    - get: oratos-ci
  - task: prepare-build
    file: oratos-ci/tasks/build-docker-image/task.yml
    input_mapping:
      source-repo: sink-resources
    params:
      DOCKERFILE: source-repo/cmd/sink-controller/Dockerfile
  - put: sink-controller-image
    params:
      build: build-image/build
      tag: build-image/tag
      cache: true
      cache_tag: latest
    get_params:
      skip_download: true

- name: build-event-controller-image
  serial: true
  plan:
  - aggregate:
    - get: sink-resources
      trigger: true
      passed:
      - unit-tests
    - get: oratos-ci
  - task: prepare-build
    file: oratos-ci/tasks/build-docker-image/task.yml
    input_mapping:
      source-repo: sink-resources
    params:
      DOCKERFILE: source-repo/cmd/event-controller/Dockerfile
  - put: event-controller-image
    params:
      build: build-image/build
      tag: build-image/tag
      cache: true
      cache_tag: latest
    get_params:
      skip_download: true

- name: build-cert-generator-image
  serial: true
  plan:
  - aggregate:
    - get: sink-resources
      trigger: true
      passed:
      - unit-tests
    - get: oratos-ci
  - task: prepare-build
    file: oratos-ci/tasks/build-docker-image/task.yml
    input_mapping:
      source-repo: sink-resources
    params:
      SOURCE_PATH: cmd/cert-generator
  - put: cert-generator-image
    params:
      build: build-image/build
      tag: build-image/tag
      cache: true
      cache_tag: latest
    get_params:
      skip_download: true

- name: build-ghostunnel-image
  serial: true
  plan:
  - aggregate:
    - get: sink-resources
      trigger: true
      passed:
      - unit-tests
    - get: oratos-ci
  - task: prepare-build
    file: oratos-ci/tasks/build-docker-image/task.yml
    input_mapping:
      source-repo: sink-resources
    params:
      SOURCE_PATH: cmd/ghostunnel
  - put: ghostunnel-image
    params:
      build: build-image/build
      tag: build-image/tag
      cache: true
      cache_tag: latest
    get_params:
      skip_download: true

- name: deploy-gke
  serial: true
  plan:
  - aggregate:
    - get: sink-resources
      trigger: true
      passed:
      - build-sink-controller-image
      - build-event-controller-image
      - build-cert-generator-image
      - build-ghostunnel-image
    - get: sink-controller-image
      trigger: true
      passed:
      - build-sink-controller-image
      params:
        skip_download: true
    - get: event-controller-image
      trigger: true
      passed:
      - build-event-controller-image
      params:
        skip_download: true
    - get: ghostunnel-image
      trigger: true
      passed:
      - build-ghostunnel-image
      params:
        skip_download: true
    - get: cert-generator-image
      trigger: true
      passed:
      - build-cert-generator-image
      params:
        skip_download: true
    - get: fluent-bit-out-syslog-image
      params:
        skip_download: true
    - get: oratos-ci
  - task: deploy
    file: oratos-ci/tasks/deploy-sink-resources/task.yml
    input_mapping:
      # bbl-state is not needed for GKE, pass in oratos-ci as a NOP
      bbl-state: oratos-ci
    params:
      SERVICE_ACCOUNT: ((gcloud.oratos-ci-testing-gke-service-account))
      GET_CREDENTIALS_HOOK: |
        echo "$SERVICE_ACCOUNT" > sa.json
        gcloud auth activate-service-account --key-file sa.json
        rm sa.json
        gcloud container clusters get-credentials oratos-ci-testing \
          --zone us-central1-a

- name: gke-tests
  serial: true
  plan:
  - aggregate:
    - get: sink-resources
      trigger: true
      passed:
      - deploy-gke
    - get: sink-controller-image
      trigger: true
      passed:
      - deploy-gke
    - get: event-controller-image
      trigger: true
      passed:
      - deploy-gke
      params:
        skip_download: true
    - get: cert-generator-image
      trigger: true
      passed:
      - deploy-gke
      params:
        skip_download: true
    - get: ghostunnel-image
      trigger: true
      passed:
      - deploy-gke
      params:
        skip_download: true
  - task: run-crd-tests
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: oratos/ci-base
      inputs:
      - name: sink-resources
      params:
        SERVICE_ACCOUNT: ((gcloud.oratos-ci-testing-gke-service-account))
        DEBUG:
      run:
        path: /bin/bash
        args:
        - "-c"
        - |
          #!/bin/bash
          set -Eeuo pipefail; [ -n "${DEBUG:-}" ] && set -x

          echo "$SERVICE_ACCOUNT" > sa.json
          gcloud auth activate-service-account --key-file sa.json
          rm sa.json
          gcloud container clusters get-credentials oratos-ci-testing \
            --zone us-central1-a

          sink-resources/tests/test.sh

- name: deploy-cfcr
  serial: true
  plan:
  - aggregate:
    - get: sink-resources
      trigger: true
      passed:
      - build-sink-controller-image
      - build-event-controller-image
      - build-cert-generator-image
      - build-ghostunnel-image
    - get: sink-controller-image
      trigger: true
      passed:
      - build-sink-controller-image
      params:
        skip_download: true
    - get: event-controller-image
      trigger: true
      passed:
      - build-event-controller-image
      params:
        skip_download: true
    - get: cert-generator-image
      trigger: true
      passed:
      - build-cert-generator-image
      params:
        skip_download: true
    - get: ghostunnel-image
      trigger: true
      passed:
      - build-ghostunnel-image
      params:
        skip_download: true
    - get: fluent-bit-out-syslog-image
      params:
        skip_download: true
    - get: oratos-ci-testing-cfcr-bbl-state
    - get: oratos-ci
  - task: deploy
    file: oratos-ci/tasks/deploy-sink-resources/task.yml
    input_mapping:
      bbl-state: oratos-ci-testing-cfcr-bbl-state
    params:
      GET_CREDENTIALS_HOOK: |
          BBL_STATE_DIR=bbl-state \
              oratos-ci/scripts/cfcr.sh testing get-credentials

- name: cfcr-tests
  serial: true
  plan:
  - aggregate:
    - get: sink-resources
      trigger: true
      passed:
      - deploy-cfcr
    - get: sink-controller-image
      trigger: true
      passed:
      - deploy-cfcr
      params:
        skip_download: true
    - get: event-controller-image
      trigger: true
      passed:
      - deploy-cfcr
      params:
        skip_download: true
    - get: cert-generator-image
      trigger: true
      passed:
      - deploy-cfcr
      params:
        skip_download: true
    - get: ghostunnel-image
      trigger: true
      passed:
      - deploy-cfcr
      params:
        skip_download: true
    - get: oratos-ci
    - get: oratos-ci-testing-cfcr-bbl-state
  - task: event-acceptance
    file: oratos-ci/tasks/event-acceptance/task.yml
    input_mapping:
      bbl-state: oratos-ci-testing-cfcr-bbl-state
    params:
      GET_CREDENTIALS_HOOK: |
        BBL_STATE_DIR=bbl-state \
            oratos-ci/scripts/cfcr.sh testing get-credentials
  - task: crosstalk-test
    file: oratos-ci/tasks/sink-crosstalk/task.yml
    input_mapping:
      bbl-state: oratos-ci-testing-cfcr-bbl-state
    params:
      GET_CREDENTIALS_HOOK: |
        BBL_STATE_DIR=bbl-state \
            oratos-ci/scripts/cfcr.sh testing get-credentials
      NAOMI_A_CERT: ((crosstalk.naomi_a_cert))
      NAOMI_A_KEY: ((crosstalk.naomi_a_key))
      NAOMI_B_CERT: ((crosstalk.naomi_b_cert))
      NAOMI_B_KEY: ((crosstalk.naomi_b_key))

- name: promote
  serial: true
  plan:
  - aggregate:
    - get: sink-resources
      trigger: true
      passed:
      - cfcr-tests
      - gke-tests
      # - control-plane-tests
    - get: sink-controller-image
      passed:
      - cfcr-tests
      - gke-tests
      # - control-plane-tests
      params:
        save: true
    - get: event-controller-image
      passed:
      - cfcr-tests
      - gke-tests
      # - control-plane-tests
      params:
        save: true
    - get: cert-generator-image
      passed:
      - cfcr-tests
      - gke-tests
      # - control-plane-tests
      params:
        save: true
    - get: ghostunnel-image
      passed:
      - cfcr-tests
      - gke-tests
      # - control-plane-tests
      params:
        save: true
    - task: write-promote-tag
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: oratos/ci-base
        outputs:
        - name: promote
        params:
          DEBUG:
        run:
          path: /bin/bash
          args:
          - "-c"
          - |
            #!/bin/bash
            set -Eeuo pipefail; [ -n "${DEBUG:-}" ] && set -x

            echo "release-elect" > promote/tag
  - put: sink-controller-image
    params:
      load: sink-controller-image
      tag: promote/tag
      cache: true
      cache_tag: latest
    get_params:
      skip_download: true
  - put: event-controller-image
    params:
      load: event-controller-image
      tag: promote/tag
      cache: true
      cache_tag: latest
    get_params:
      skip_download: true
  - put: cert-generator-image
    params:
      load: cert-generator-image
      tag: promote/tag
      cache: true
      cache_tag: latest
    get_params:
      skip_download: true
  - put: ghostunnel-image
    params:
      load: ghostunnel-image
      tag: promote/tag
      cache: true
      cache_tag: latest
    get_params:
      skip_download: true

- name: release
  serial: true
  plan:
  - get: sink-controller-image
  - get: event-controller-image
  - get: cert-generator-image
  - get: ghostunnel-image
  - task: release
    privileged: true
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: oratos/ci-base
      params:
        GIT_REF: ((sink_resource_release_params.GIT_REF))
        VERSION: ((sink_resource_release_params.VERSION))
        FLUENT_BIT_OUT_SYSLOG_VERSION: ((sink_resource_release_params.FLUENT_BIT_OUT_SYSLOG_VERSION))
        DOCKERHUB_USERNAME: ((docker-hub.username))
        DOCKERHUB_PASSWORD: ((docker-hub.password))
        GITHUB_PRIVATE_KEY: ((github.oratos-bot-private-key))
        DEBUG:
      outputs:
      - name: github-release
      run:
        path: /bin/bash
        args:
        - "-c"
        - |
          #!/bin/bash
          set -Eeuo pipefail; [ -n "${DEBUG:-}" ] && set -x

          if [ -z "$GIT_REF" ]; then
            echo GIT_REF param required
            exit 1
          fi
          if ! [[ "$VERSION" =~ v ]]; then
            echo VERSION param required to start with v
            exit 1
          fi
          if ! [[ "$FLUENT_BIT_OUT_SYSLOG_VERSION" =~ v ]]; then
            echo FLUENT_BIT_OUT_SYSLOG_VERSION param required to start with v
            exit 1
          fi

          # Note: this was copied from the docker-image-resource
          # https://github.com/concourse/docker-image-resource/blob/c725c6277ca2820016de1bfe2bdfabaad5fd5879/assets/common.sh#L4
          sanitize_cgroups() {
            mkdir -p /sys/fs/cgroup
            mountpoint -q /sys/fs/cgroup || \
              mount -t tmpfs -o uid=0,gid=0,mode=0755 cgroup /sys/fs/cgroup

            mount -o remount,rw /sys/fs/cgroup

            sed -e 1d /proc/cgroups | while read -r sys _ _ enabled; do
              if [ "$enabled" != "1" ]; then
                # subsystem disabled; skip
                continue
              fi

              grouping="$(cut -d: -f2 /proc/self/cgroup | grep "\\<$sys\\>")" || true
              if [ -z "$grouping" ]; then
                # subsystem not mounted anywhere; mount it on its own
                grouping="$sys"
              fi

              mountpoint="/sys/fs/cgroup/$grouping"

              mkdir -p "$mountpoint"

              # clear out existing mount to make sure new one is read-write
              if mountpoint -q "$mountpoint"; then
                umount "$mountpoint"
              fi

              mount -n -t cgroup -o "$grouping" cgroup "$mountpoint"

              if [ "$grouping" != "$sys" ]; then
                if [ -L "/sys/fs/cgroup/$sys" ]; then
                  rm "/sys/fs/cgroup/$sys"
                fi

                ln -s "$mountpoint" "/sys/fs/cgroup/$sys"
              fi
            done

            if ! test -e /sys/fs/cgroup/systemd ; then
              mkdir /sys/fs/cgroup/systemd
              mount -t cgroup -o none,name=systemd none /sys/fs/cgroup/systemd
            fi
          }
          sanitize_cgroups
          service docker start
          function cleanup {
            set +e
            service docker stop
            killall ssh-agent
          }
          trap cleanup EXIT

          echo waiting 10 seconds while docker starts up
          sleep 10

          mkdir -p ~/.ssh/
          ssh-keyscan github.com >> ~/.ssh/known_hosts 2> /dev/null
          eval "$(ssh-agent)"
          [ -n "${DEBUG:-}" ] && set +x
          echo "$GITHUB_PRIVATE_KEY" > key
          [ -n "${DEBUG:-}" ] && set -x
          chmod 0600 key
          ssh-add key
          rm key
          git clone git@github.com:pivotal-cf/sink-resources
          pushd sink-resources > /dev/null
            git checkout "$GIT_REF"
            git tag "$VERSION"
          popd > /dev/null

          yq read sink-resources/manifests/60-deployments/sink.yml --tojson \
            | jq '(.spec.template.spec.containers[] | select(.name == "sink-controller")).image = "oratos/sink-controller:'"$VERSION"'"' \
            > sink-resources/manifests/60-deployments/sink.json
          yq read sink-resources/manifests/60-deployments/sink.json \
            > sink-resources/manifests/60-deployments/sink.yml
          rm sink-resources/manifests/60-deployments/sink.json

          yq read sink-resources/manifests/60-deployments/event.yml --tojson \
            | jq '(.spec.template.spec.containers[] | select(.name == "event-controller")).image = "oratos/event-controller:'"$VERSION"'"' \
            | jq '(.spec.template.spec.containers[] | select(.name == "ghostunnel")).image = "oratos/ghostunnel:'"$VERSION"'"' \
            > sink-resources/manifests/60-deployments/event.json
          yq read sink-resources/manifests/60-deployments/event.json \
            > sink-resources/manifests/60-deployments/event.yml
          rm sink-resources/manifests/60-deployments/event.json

          yq read sink-resources/manifests/45-jobs/cert-generator.yml --tojson \
            | jq '(.spec.template.spec.containers[] | select(.name == "cert-generator")).image = "oratos/cert-generator:'"$VERSION"'"' \
            > sink-resources/manifests/45-jobs/cert-generator.json
          yq read sink-resources/manifests/45-jobs/cert-generator.json \
            > sink-resources/manifests/45-jobs/cert-generator.yml
          rm sink-resources/manifests/45-jobs/cert-generator.json

          yq read sink-resources/manifests/50-daemonsets/fluent-bit.yml --tojson \
            | jq '(.spec.template.spec.containers[] | select(.name == "fluent-bit")).image = "oratos/fluent-bit-out-syslog:'"$FLUENT_BIT_OUT_SYSLOG_VERSION"'"' \
            | jq '(.spec.template.spec.containers[] | select(.name == "ghostunnel")).image = "oratos/ghostunnel:'"$VERSION"'"' \
            > sink-resources/manifests/50-daemonsets/fluent-bit.json
          yq read sink-resources/manifests/50-daemonsets/fluent-bit.json \
            > sink-resources/manifests/50-daemonsets/fluent-bit.yml
          rm sink-resources/manifests/50-daemonsets/fluent-bit.json

          for f in sink-resources/manifests/**/*; do
            echo ---
            cat "$f";
          done > github-release/manifest.yml
          echo "$VERSION" > github-release/name
          echo "$VERSION" > github-release/tag

          pushd sink-resources > /dev/null
            git reset --hard HEAD
          popd > /dev/null

          cat <<EOF > github-release/body
          These are the versions of the docker images used in this release:
          - [oratos/sink-controller][sink-controller]:$VERSION
          - [oratos/event-controller][event-controller]:$VERSION
          - [oratos/cert-generator][cert-generator]:$VERSION
          - [oratos/ghostunnel][ghostunnel]:$VERSION
          - [oratos/fluent-bit-out-syslog][fluent-bit-out-syslog]:$FLUENT_BIT_OUT_SYSLOG_VERSION

          [sink-controller]: https://hub.docker.com/r/oratos/sink-controller/
          [event-controller]: https://hub.docker.com/r/oratos/event-controller/
          [cert-generator]: https://hub.docker.com/r/oratos/cert-generator/
          [ghostunnel]: https://hub.docker.com/r/oratos/ghostunnel/
          [fluent-bit-out-syslog]: https://hub.docker.com/r/oratos/fluent-bit-out-syslog/
          EOF

          [ -n "${DEBUG:-}" ] && set +x
          echo "$DOCKERHUB_PASSWORD" \
            | docker login \
              --username "$DOCKERHUB_USERNAME" \
              --password-stdin
          [ -n "${DEBUG:-}" ] && set -x

          sc_docker_name="oratos/sink-controller:$VERSION"
          ec_docker_name="oratos/event-controller:$VERSION"
          cg_docker_name="oratos/cert-generator:$VERSION"
          gt_docker_name="oratos/ghostunnel:$VERSION"
          fb_docker_name="oratos/fluent-bit-out-syslog:$FLUENT_BIT_OUT_SYSLOG_VERSION"

          docker pull "oratos/sink-controller:$GIT_REF"
          docker tag "oratos/sink-controller:$GIT_REF" "$sc_docker_name"
          docker tag "oratos/sink-controller:$GIT_REF" "oratos/sink-controller:latest"
          docker push "$sc_docker_name"
          docker push "oratos/sink-controller:latest"

          docker pull "oratos/event-controller:$GIT_REF"
          docker tag "oratos/event-controller:$GIT_REF" "$ec_docker_name"
          docker tag "oratos/event-controller:$GIT_REF" "oratos/event-controller:latest"
          docker push "$ec_docker_name"
          docker push "oratos/event-controller:latest"

          docker pull "oratos/cert-generator:$GIT_REF"
          docker tag "oratos/cert-generator:$GIT_REF" "$cg_docker_name"
          docker tag "oratos/cert-generator:$GIT_REF" "oratos/cert-generator:latest"
          docker push "$cg_docker_name"
          docker push "oratos/cert-generator:latest"

          docker pull "oratos/ghostunnel:$GIT_REF"
          docker tag "oratos/ghostunnel:$GIT_REF" "$gt_docker_name"
          docker tag "oratos/ghostunnel:$GIT_REF" "oratos/ghostunnel:latest"
          docker push "$gt_docker_name"
          docker push "oratos/ghostunnel:latest"

          docker pull "$fb_docker_name"
          docker save "$sc_docker_name" | gzip > "github-release/oratos_sink-controller:$VERSION.tgz"
          docker save "$ec_docker_name" | gzip > "github-release/oratos_event-controller:$VERSION.tgz"
          docker save "$cg_docker_name" | gzip > "github-release/oratos_cert-generator:$VERSION.tgz"
          docker save "$gt_docker_name" | gzip > "github-release/oratos_ghostunnel:$VERSION.tgz"
          docker save "$fb_docker_name" | gzip > "github-release/oratos_fluent-bit-out-syslog:$FLUENT_BIT_OUT_SYSLOG_VERSION.tgz"

          pushd sink-resources > /dev/null
            git push origin --tags
          popd > /dev/null
  - put: sink-resources-github-release
    params:
      name: github-release/name
      body: github-release/body
      tag: github-release/tag

      globs:
      - github-release/manifest.yml
      - github-release/*.tgz

- name: update-bosh-release
  plan:
  - get: sink-resources-github-release
    trigger: true
    passed:
    - release
    version:
      tag: ((sink_resource_release_params.VERSION))
  - get: sink-resources-release
  - get: oratos-ci
  - task: update-bosh-release
    file: oratos-ci/tasks/update-bosh-release/task.yml
    params:
      PRIVATE_YML: ((release.private_yml))
  - put: pks-releng-release-bucket
    params:
      file: bosh-release/binaries/*.tgz
  - put: sink-resources-release
    params:
      repository: put-sink-resources-release
      name: bosh-release/name
  - put: sink-resources-release-github-release
    params:
      name: bosh-release/name
      tag: bosh-release/tag
      globs:
      - bosh-release/binaries/*.tgz

- name: deploy-control-plane
  serial: true
  plan:
  - aggregate:
    - get: sink-resources
      trigger: true
      passed:
      - build-sink-controller-image
      - build-event-controller-image
      - build-cert-generator-image
      - build-ghostunnel-image
    - get: sink-controller-image
      trigger: true
      passed:
      - build-sink-controller-image
      params:
        skip_download: true
    - get: event-controller-image
      trigger: true
      passed:
      - build-event-controller-image
      params:
        skip_download: true
    - get: cert-generator-image
      trigger: true
      passed:
      - build-cert-generator-image
      params:
        skip_download: true
    - get: ghostunnel-image
      trigger: true
      passed:
      - build-ghostunnel-image
      params:
        skip_download: true
    - get: fluent-bit-out-syslog-image
      params:
        skip_download: true
    - get: control-plane-test-bbl-state
    - get: oratos-ci
  - task: deploy
    file: oratos-ci/tasks/deploy-sink-resources/task.yml
    input_mapping:
      bbl-state: control-plane-test-bbl-state
    params:
      GET_CREDENTIALS_HOOK: |
          BBL_STATE_DIR=bbl-state \
              oratos-ci/scripts/cfcr.sh control-plane-test get-credentials

- name: control-plane-tests
  plan:
  - aggregate:
    - get: sink-resources
      trigger: true
      passed:
      - deploy-control-plane
    - get: sink-controller-image
      trigger: true
      passed:
      - deploy-control-plane
    - get: event-controller-image
      trigger: true
      passed:
      - deploy-control-plane
      params:
        skip_download: true
    - get: cert-generator-image
      trigger: true
      passed:
      - deploy-control-plane
      params:
        skip_download: true
    - get: ghostunnel-image
      trigger: true
      passed:
      - deploy-control-plane
      params:
        skip_download: true
    - get: control-plane-test-bbl-state
    - get: oratos-ci
  - task: run-test
    file: oratos-ci/tasks/control-plane-downtime-test/task.yml
    params:
      SKIP_CLEANUP: false
      GET_CREDENTIALS_HOOK: |
        BBL_STATE_DIR=bbl-state \
          oratos-ci/scripts/cfcr.sh control-plane-test get-credentials
    input_mapping:
      bbl-state: control-plane-test-bbl-state
