groups:
- name: main
  jobs:
  - cfcr-deploy
  - cfcr-destroy
  - oratos-deploy
  - namespace-drain-deploy

resources:
- name: oratos-deployment
  type: git
  source:
    uri: git@github.com:pivotal-cf/oratos-deployment.git
    branch: master
    private_key: {{oratos-bot-github-key}}

- name: namespace-drain-manifests
  type: git
  source:
    uri: git@github.com:pivotal-cf/namespace-drain.git
    branch: master
    private_key: {{oratos-bot-github-key}}
    paths:
    - manifests

- name: namespace-drain-image
  type: docker-image
  source:
    repository: oratos/namespace-drain
    username: {{docker-hub-username}}
    password: {{docker-hub-password}}

- name: fluent-bit-out-syslog-image
  type: docker-image
  source:
    repository: oratos/fluent-bit-out-syslog
    username: {{docker-hub-username}}
    password: {{docker-hub-password}}

- name: oratos-secrets
  type: git
  source:
    uri: git@github.com:pivotal-cf/oratos-secrets.git
    branch: master
    private_key: {{oratos-bot-github-key}}

- name: deployments-loggregator
  type: git
  source:
    uri: git@github.com:cloudfoundry/deployments-loggregator.git
    branch: master
    private_key: {{deployments-loggregator-key}}

- name: kubo-deployment
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/kubo-deployment
    branch: v0.17.0

- name: kubo-release-bosh-io
  type: bosh-io-release
  source:
    repository: cloudfoundry-incubator/kubo-release

- name: cf-deployment-concourse-tasks
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks
    branch: v6.8

- name: oratos-ci
  type: git
  source:
    uri: git@github.com:pivotal-cf/oratos-ci.git
    branch: master
    private_key: {{oratos-bot-github-key}}

jobs:
- name: cfcr-deploy
  public: false
  serial: true
  plan:
  - aggregate:
    - get: deployments-loggregator
    - get: kubo-deployment
      trigger: true
    - get: cf-deployment-concourse-tasks
    - get: kubo-release-bosh-io
      trigger: true
  - task: upload-release
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-deployment-concourse-tasks
      inputs:
      - name: kubo-release-bosh-io
      - name: deployments-loggregator
      params:
        BBL_STATE_DIR: gcp/playground
      run:
        path: /bin/bash
        args:
        - "-c"
        - |
          #!/bin/bash
          set -ex

          # set bosh env vars
          set +x
          pushd "deployments-loggregator/$BBL_STATE_DIR" > /dev/null
            eval "$(bbl print-env)"
          popd > /dev/null
          set -x

          bosh upload-release kubo-release-bosh-io/release.tgz
  - task: upload-stemcell
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-deployment-concourse-tasks
      inputs:
      - name: kubo-deployment
      - name: deployments-loggregator
      params:
        BBL_STATE_DIR: gcp/playground
      run:
        path: /bin/bash
        args:
        - "-c"
        - |
          #!/bin/bash
          set -ex

          # get stemcell version
          pushd kubo-deployment > /dev/null
            version="$(
              bosh int manifests/cfcr.yml \
                --path /stemcells/alias=trusty/version
            )"
          popd > /dev/null

          # set bosh env vars
          set +x
          pushd "deployments-loggregator/$BBL_STATE_DIR" > /dev/null
            eval "$(bbl print-env)"
          popd > /dev/null
          set -x

          bosh upload-stemcell \
            "https://bosh.io/d/stemcells/bosh-google-kvm-ubuntu-trusty-go_agent?v=$version"
  - task: upload-vars-to-credhub
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: loggregator/base
      inputs:
      - name: deployments-loggregator
      run:
        path: /bin/bash
        args:
        - "-c"
        - |
          #!/bin/bash
          set -e

          eval "$(ssh-agent)"
          cd deployments-loggregator/gcp/playground
          source .envrc
          credhub import --file k8s-cloud-provider-credhub-vars.yml
          killall ssh-agent
  - task: cfcr-deploy
    file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
    input_mapping:
      cf-deployment: kubo-deployment
      ops-files: kubo-deployment
      bbl-state: deployments-loggregator
      vars-store: deployments-loggregator
      vars-files: deployments-loggregator
    params:
      BBL_STATE_DIR: gcp/playground
      SYSTEM_DOMAIN: playground.loggr.cf-app.com
      USE_VARS_STORE: false
      MANIFEST_FILE: manifests/cfcr.yml
      OPS_FILES: |
        manifests/ops-files/allow-privileged-containers.yml
        manifests/ops-files/iaas/gcp/cloud-provider.yml
        manifests/ops-files/iaas/gcp/add-service-key-master.yml
        manifests/ops-files/iaas/gcp/add-service-key-worker.yml
  - task: run-apply-addons-errand
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      bbl-state: deployments-loggregator
    params:
      DEPLOYMENT_NAME: cfcr
      ERRAND_NAME: apply-addons
      BBL_STATE_DIR: gcp/playground

- name: cfcr-destroy
  serial_groups: ["deployment"]
  public: false
  plan:
  - aggregate:
    - get: deployments-loggregator
    - get: cf-deployment-concourse-tasks
    - get: oratos-ci
  - task: delete-k8s-resources
    file: oratos-ci/tasks/k8s-delete-all-resources/task.yml
  - task: cfcr-deployment-destroy
    file: cf-deployment-concourse-tasks/bosh-delete-deployment/task.yml
    input_mapping:
      bbl-state: deployments-loggregator
    params:
      BBL_STATE_DIR: gcp/playground
      DEPLOYMENT_NAME: cfcr

- name: oratos-deploy
  public: false
  serial: true
  plan:
  - aggregate:
    - get: deployments-loggregator
    - get: oratos-secrets
    - get: oratos-deployment
      trigger: true
  - task: prepare-certs
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: loggregator/certs
      inputs:
      - name: oratos-secrets
      outputs:
      - name: updated-oratos-secrets
      run:
        path: /bin/bash
        args:
        - "-c"
        - |
          #!/bin/bash
          set -e

          apt-get update --yes
          apt-get install --yes git
          git config --global user.email "cf-loggregator@pivotal.io"
          git config --global user.name "Loggregator CI"

          cp -R oratos-secrets/. updated-oratos-secrets/

          generate-certs.sh output
          tls_certs_header='
          apiVersion: v1
          kind: Secret
          metadata:
            name: loggregator-tls-certs
            namespace: oratos
          type: Opaque
          data:'

          echo "$tls_certs_header" > k8s-certs.yml
          ls output |
              while read line
                  do echo "  $line: $(cat output/$line | base64 -w 0)"
              done >> k8s-certs.yml
          mv k8s-certs.yml updated-oratos-secrets/
          pushd updated-oratos-secrets
            git add k8s-certs.yml
            git commit -m "Add loggregator certs for kubernetes

          [ci-skip]"
          popd
  - put: oratos-secrets
    params:
      repository: updated-oratos-secrets
      rebase: true
  - task: oratos-deploy
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: loggregator/base
      inputs:
      - name: oratos-deployment
      - name: deployments-loggregator
      - name: updated-oratos-secrets
      run:
        path: /bin/bash
        args:
        - "-c"
        - |
          #!/bin/bash
          set -e

          pushd deployments-loggregator/gcp/playground
            eval "$(ssh-agent)"
            source .envrc
            set +e
            source k8s_login
            set -e
          popd
          cp updated-oratos-secrets/k8s-certs.yml oratos-deployment/secrets/
          pushd oratos-deployment
            ./deploy.sh
          popd
          killall ssh
          killall ssh-agent

- name: namespace-drain-deploy
  public: false
  serial: true
  plan:
  - aggregate:
    - get: namespace-drain-manifests
      trigger: true
    - get: namespace-drain-image
      trigger: true
      params:
        skip_download: true
    - get: fluent-bit-out-syslog-image
      trigger: true
      params:
        skip_download: true
    - get: deployments-loggregator
  - task: deploy-namespace-drain
    input_mapping:
      namespace-drain: namespace-drain-manifests
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: loggregator/base
      inputs:
      - name: deployments-loggregator
      - name: namespace-drain
      run:
        path: /bin/bash
        args:
        - "-c"
        - |
          #!/bin/bash
          set -e

          function cleanup {
            set +e
            killall ssh 2> /dev/null
            killall ssh-agent 2> /dev/null
          }
          trap cleanup EXIT

          # TODO: deploy with the triggered images, not :latest

          pushd deployments-loggregator/gcp/playground
            eval "$(ssh-agent)"
            source .envrc
            set +e
            source k8s_login
            set -e
          popd

          kubectl apply -R -f namespace-drain/manifests
          patch='{"spec": {"template": {"metadata": {"labels": {"randomversion": "'$RANDOM'"}}}}}'
          kubectl patch -R -f namespace-drain/manifests --patch "$patch"
