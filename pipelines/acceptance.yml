groups:
- name: main
  jobs:
  - oratos-deploy
  - namespace-drain-deploy
- name: cfcr-lifecycle
  jobs:
  - bikepark-cfcr-deploy
  - bikepark-cfcr-destroy
- name: director-lifecycle
  jobs:
  - bikepark-bbl-up
  - bikepark-bbl-destroy

resource_types:
- name: vault
  type: docker-image
  source:
    repository: wfernandes/vault-resource
    tag: latest

resources:
- name: oratos-deployment
  type: git
  source:
    uri: git@github.com:pivotal-cf/oratos-deployment.git
    branch: master
    private_key: ((github.oratos-bot-private-key))

- name: bikepark-bbl-state
  type: vault
  source:
    url: https://vault.oratos.ci.cf-app.com
    role_id: ((vault.role_id))
    secret_id: ((vault.secret_id))
    path: secret/envs/bikepark-bbl-state
    tarball: true

- name: bikepark-cfcr-gcp-vars
  type: vault
  source:
    url: https://vault.oratos.ci.cf-app.com
    role_id: ((vault.role_id))
    secret_id: ((vault.secret_id))
    path: secret/envs/bikepark-cfcr-gcp-vars

- name: namespace-drain-manifests
  type: git
  source:
    uri: git@github.com:pivotal-cf/namespace-drain.git
    branch: master
    private_key: ((github.oratos-bot-private-key))
    paths:
    - manifests

- name: sink-controller-image
  type: docker-image
  source:
    repository: oratos/sink-controller
    username: ((docker-hub.username))
    password: ((docker-hub.password))
    tag: release-elect

- name: fluent-bit-out-syslog-image
  type: docker-image
  source:
    repository: oratos/fluent-bit-out-syslog
    username: ((docker-hub.username))
    password: ((docker-hub.password))
    tag: release-elect

- name: kubo-deployment
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/kubo-deployment
    branch: v0.19.0

- name: kubo-release-bosh-io
  type: bosh-io-release
  source:
    repository: cloudfoundry-incubator/kubo-release
    regexp: "0.19.*"

- name: cf-deployment-concourse-tasks
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks
    branch: v7.1

- name: oratos-ci
  type: git
  source:
    uri: git@github.com:pivotal-cf/oratos-ci.git
    branch: master
    private_key: ((github.oratos-bot-private-key))

jobs:
- name: bikepark-bbl-up
  serial: true
  serial_groups:
  - bikepark-director-lifecycle
  plan:
  - aggregate:
    - get: bikepark-bbl-state
    - get: cf-deployment-concourse-tasks
  - task: bbl-up
    file: cf-deployment-concourse-tasks/bbl-up/task.yml
    input_mapping:
      bbl-state: bikepark-bbl-state
      bbl-config: bikepark-bbl-state
    params:
      BBL_IAAS: gcp
      BBL_GCP_SERVICE_ACCOUNT_KEY: ((gcloud.bikepark-service-account))
      BBL_GCP_REGION: us-central1
      BBL_ENV_NAME: bikepark
      SKIP_LB_CREATION: true
  - put: bikepark-bbl-state
    params:
      data: updated-bbl-state

- name: bikepark-bbl-destroy
  serial: true
  serial_groups:
  - bikepark-director-lifecycle
  plan:
  - aggregate:
    - get: bikepark-bbl-state
    - get: cf-deployment-concourse-tasks
  - task: bbl-destroy
    file: cf-deployment-concourse-tasks/bbl-destroy/task.yml
    input_mapping:
      bbl-state: bikepark-bbl-state
    params:
      BBL_IAAS: gcp
      BBL_GCP_SERVICE_ACCOUNT_KEY: ((gcloud.bikepark-service-account))
  - put: bikepark-bbl-state
    params:
      data: updated-bbl-state

- name: bikepark-cfcr-deploy
  serial: true
  serial_groups:
  - bikepark-cfcr-lifecycle
  plan:
  - aggregate:
    - get: bikepark-bbl-state
    - get: bikepark-cfcr-gcp-vars
    - get: cf-deployment-concourse-tasks
    - get: oratos-ci
    - get: kubo-deployment
      trigger: true
    - get: kubo-release-bosh-io
      trigger: true
  - aggregate:
    - task: upload-release
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: relintdockerhubpushbot/cf-deployment-concourse-tasks
        inputs:
        - name: kubo-release-bosh-io
        - name: bikepark-bbl-state
        params:
          DEBUG:
        run:
          path: /bin/bash
          args:
          - "-c"
          - |
            #!/bin/bash
            set -Eeuo pipefail; [ -n "$DEBUG" ] && set -x

            # set bosh env vars
            set +x
            pushd bikepark-bbl-state/bbl-state > /dev/null
              eval "$(bbl print-env)"
            popd > /dev/null
            set -x

            bosh upload-release kubo-release-bosh-io/release.tgz
    - task: upload-stemcell
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: relintdockerhubpushbot/cf-deployment-concourse-tasks
        inputs:
        - name: kubo-deployment
        - name: bikepark-bbl-state
        params:
          DEBUG:
        run:
          path: /bin/bash
          args:
          - "-c"
          - |
            #!/bin/bash
            set -Eeuo pipefail; [ -n "$DEBUG" ] && set -x

            # get stemcell version
            pushd kubo-deployment > /dev/null
              version="$(
                bosh int manifests/cfcr.yml \
                  --path /stemcells/alias=trusty/version
              )"
            popd > /dev/null

            # set bosh env vars
            set +x
            pushd bikepark-bbl-state/bbl-state > /dev/null
              eval "$(bbl print-env)"
            popd > /dev/null
            set -x

            bosh upload-stemcell \
              "https://bosh.io/d/stemcells/bosh-google-kvm-ubuntu-trusty-go_agent?v=$version"
    - task: upload-vars-to-credhub
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: oratos/ci-base
        inputs:
        - name: bikepark-bbl-state
        - name: bikepark-cfcr-gcp-vars
        params:
          DEBUG:
        run:
          path: /bin/bash
          args:
          - "-c"
          - |
            #!/bin/bash
            set -Eeuo pipefail; [ -n "$DEBUG" ] && set -x

            pushd bikepark-bbl-state/bbl-state > /dev/null
              eval "$(bbl print-env)"
            popd > /dev/null

            credhub import --file bikepark-cfcr-gcp-vars/vars.yml
    - task: modify-kubo-deployment
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: oratos/ci-base
        inputs:
        - name: kubo-deployment
        outputs:
        - name: modified-kubo-deployment
        params:
          DEBUG:
        run:
          path: /bin/bash
          args:
          - "-c"
          - |
            #!/bin/bash
            set -Eeuo pipefail; [ -n "$DEBUG" ] && set -x

            cp -r kubo-deployment/. modified-kubo-deployment/
            cat <<EOF > ops.yml
            - type: remove
              path: /releases/name=bosh-dns
            - type: remove
              path: /addons/name=bosh-dns
            - type: remove
              path: /variables/name=~1dns_healthcheck_tls_ca
            - type: remove
              path: /variables/name=~1dns_healthcheck_server_tls
            - type: remove
              path: /variables/name=~1dns_healthcheck_client_tls
            - type: remove
              path: /variables/name=~1dns_api_tls_ca
            - type: remove
              path: /variables/name=~1dns_api_server_tls
            - type: remove
              path: /variables/name=~1dns_api_client_tls
            EOF
            bosh interpolate kubo-deployment/manifests/cfcr.yml \
              --ops-file ops.yml \
              > modified-kubo-deployment/manifests/cfcr.yml
  - task: cfcr-deploy
    file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
    input_mapping:
      bbl-state: bikepark-bbl-state
      cf-deployment: modified-kubo-deployment
      ops-files: modified-kubo-deployment
      vars-files: kubo-deployment # this isn't used but is a required input
    params:
      SYSTEM_DOMAIN: example.com # this isn't used but is a required input
      MANIFEST_FILE: manifests/cfcr.yml
      OPS_FILES: |
        manifests/ops-files/allow-privileged-containers.yml
        manifests/ops-files/iaas/gcp/cloud-provider.yml
        manifests/ops-files/iaas/gcp/add-service-key-master.yml
        manifests/ops-files/iaas/gcp/add-service-key-worker.yml
  - task: run-apply-addons-errand
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      bbl-state: bikepark-bbl-state
    params:
      DEPLOYMENT_NAME: cfcr
      ERRAND_NAME: apply-addons
  - task: setup-load-balancer-service
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: oratos/ci-base
      inputs:
      - name: kubo-deployment
      - name: bikepark-bbl-state
      - name: oratos-ci
      outputs:
      - name: modified-kubo-deployment
      params:
        DEBUG:
      run:
        path: /bin/bash
        args:
        - "-c"
        - |
          #!/bin/bash
          set -Eeuo pipefail; [ -n "$DEBUG" ] && set -x

          function cleanup {
              set +e
              killall -9 ssh > /dev/null 2>&1
              killall -9 ssh-agent > /dev/null 2>&1
          }
          trap cleanup EXIT

          BBL_STATE_DIR=bikepark-bbl-state \
              oratos-ci/scripts/cfcr.sh bikepark get-credentials-tunnel

          patch='{"spec": {"type": "LoadBalancer"}}'
          kubectl patch service kubernetes --namespace default --patch "$patch" || true

- name: bikepark-cfcr-destroy
  serial_groups:
  - bikepark-cfcr-lifecycle
  plan:
  - aggregate:
    - get: bikepark-bbl-state
    - get: oratos-ci
    - get: cf-deployment-concourse-tasks
  - task: delete-k8s-resources
    file: oratos-ci/tasks/k8s-delete-all-resources/task.yml
    input_mapping:
      bbl-state: bikepark-bbl-state
    params:
      GET_CREDENTIALS_HOOK: |
        BBL_STATE_DIR=bikepark-bbl-state \
            oratos-ci/scripts/cfcr.sh bikepark get-credentials
  - task: cfcr-deployment-destroy
    file: cf-deployment-concourse-tasks/bosh-delete-deployment/task.yml
    input_mapping:
      bbl-state: bikepark-bbl-state
    params:
      DEPLOYMENT_NAME: cfcr

- name: oratos-deploy
  serial: true
  plan:
  - aggregate:
    - get: oratos-deployment
      trigger: true
    - get: bikepark-bbl-state
    - get: oratos-ci
  - task: oratos-deploy
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: oratos/ci-base
      inputs:
      - name: oratos-deployment
      - name: oratos-ci
      - name: bikepark-bbl-state
      params:
        LOGGREGATOR_TLS_SECRETS: ((bikepark.loggregator-tls-secrets))
        DEBUG:
      run:
        path: /bin/bash
        args:
        - "-c"
        - |
          #!/bin/bash
          set -Eeuo pipefail; [ -n "$DEBUG" ] && set -x

          BBL_STATE_DIR=bikepark-bbl-state \
              oratos-ci/scripts/cfcr.sh bikepark get-credentials

          echo "$LOGGREGATOR_TLS_SECRETS" > oratos-deployment/secrets/loggregator-tls-certs.yml
          pushd oratos-deployment > /dev/null
            ./deploy.sh
          popd > /dev/null

- name: namespace-drain-deploy
  serial: true
  plan:
  - aggregate:
    - get: namespace-drain-manifests
      trigger: true
    - get: sink-controller-image
      trigger: true
      params:
        skip_download: true
    - get: fluent-bit-out-syslog-image
      trigger: true
      params:
        skip_download: true
    - get: bikepark-bbl-state
    - get: oratos-ci
  - task: deploy-namespace-drain
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: oratos/ci-base
      inputs:
      - name: bikepark-bbl-state
      - name: namespace-drain-manifests
      - name: oratos-ci
      - name: fluent-bit-out-syslog-image
      - name: sink-controller-image
      params:
        DEBUG:
      run:
        path: /bin/bash
        args:
        - "-c"
        - |
          #!/bin/bash
          set -Eeuo pipefail; [ -n "$DEBUG" ] && set -x

          # TODO: deploy with the triggered images, not :latest

          BBL_STATE_DIR=bikepark-bbl-state \
              oratos-ci/scripts/cfcr.sh bikepark get-credentials

          fluent_image_digest=$(cat fluent-bit-out-syslog-image/digest)
          yq read namespace-drain-manifests/manifests/04-daemonsets/fluent-bit.yml --tojson | \
            jq '(.spec.template.spec.containers[] | select(.name == "fluent-bit")).image = "oratos/fluent-bit-out-syslog@'"$fluent_image_digest"'"' \
            > namespace-drain-manifests/manifests/04-daemonsets/fluent-bit.json
          rm namespace-drain-manifests/manifests/04-daemonsets/fluent-bit.yml

          namespace_drain_image_digest=$(cat sink-controller-image/digest)
          yq read namespace-drain-manifests/manifests/05-deployments/sink.yml --tojson | \
            jq '(.spec.template.spec.containers[] | select(.name == "sink-controller")).image = "oratos/sink-controller@'"$namespace_drain_image_digest"'"' \
            > namespace-drain-manifests/manifests/05-deployments/sink.json
          rm namespace-drain-manifests/manifests/05-deployments/sink.yml

          kubectl apply -R -f namespace-drain-manifests/manifests
          patch='{"spec": {"template": {"metadata": {"labels": {"randomversion": "'$RANDOM'"}}}}}'
          kubectl patch -R -f namespace-drain-manifests/manifests --patch "$patch"
